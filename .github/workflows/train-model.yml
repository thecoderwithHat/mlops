name: Model Training Pipeline

on:
  workflow_dispatch:
    inputs:
      model_type:
        description: 'Model type to train'
        required: true
        default: 'xgboost'
        type: choice
        options:
          - linear_regression
          - xgboost
          - random_forest
      data_month:
        description: 'Data month (YYYY-MM)'
        required: true
        default: '2021-01'
      experiment_name:
        description: 'MLflow experiment name'
        required: false
        default: 'duration-prediction'

env:
  PYTHON_VERSION: '3.11'
  MLFLOW_TRACKING_URI: 'http://localhost:5000'
  MLFLOW_ARTIFACT_ROOT: './mlartifacts'

jobs:
  train:
    name: Train ML Model
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mlflow boto3 scikit-learn xgboost pandas numpy
          
          if [ -f 02-experiment-tracking/requirements.txt ]; then 
            pip install -r 02-experiment-tracking/requirements.txt
          fi
      
      - name: Download training data
        run: |
          mkdir -p 02-experiment-tracking/data
          cd 02-experiment-tracking/data
          
          # Download NYC Taxi data
          echo "Downloading data for ${{ inputs.data_month }}..."
          wget -q https://d37ci6vzurychx.cloudfront.net/trip-data/green_tripdata_${{ inputs.data_month }}.parquet \
            -O green_tripdata_${{ inputs.data_month }}.parquet || {
            echo "⚠️  Data download failed for ${{ inputs.data_month }}"
            echo "Checking if data already exists..."
            if [ -f "green_tripdata_${{ inputs.data_month }}.parquet" ]; then
              echo "✅ Using existing data file"
            else
              echo "❌ No data available, workflow will fail"
              exit 1
            fi
          }
          echo "✅ Data ready: green_tripdata_${{ inputs.data_month }}.parquet"
          ls -lh green_tripdata_${{ inputs.data_month }}.parquet
        continue-on-error: false
      
      - name: Setup artifact directories
        run: |
          # Create directories for MLflow artifacts in the working directory
          mkdir -p mlruns mlartifacts
          echo "MLFLOW_ARTIFACT_ROOT=$(pwd)/mlartifacts" >> $GITHUB_ENV
          echo "Artifact root: $(pwd)/mlartifacts"
      
      - name: Start MLflow tracking server
        run: |
          # Start MLflow server with artifact root in current directory
          echo "Starting MLflow server..."
          mlflow server \
            --host 0.0.0.0 \
            --port 5000 \
            --backend-store-uri sqlite:///mlflow.db \
            --default-artifact-root file://$(pwd)/mlartifacts &
          
          MLFLOW_PID=$!
          echo "MLflow PID: $MLFLOW_PID"
          
          # Wait for MLflow to be ready
          echo "Waiting for MLflow server to start..."
          for i in {1..30}; do
            if curl -s http://localhost:5000/health > /dev/null 2>&1; then
              echo "✅ MLflow server is ready!"
              break
            fi
            echo "Attempt $i/30: Waiting..."
            sleep 2
          done
          
          # Verify it's running
          if ! curl -s http://localhost:5000/health > /dev/null 2>&1; then
            echo "❌ MLflow server failed to start"
            exit 1
          fi
          
          echo "MLflow server started with artifact root: file://$(pwd)/mlartifacts"
      
      - name: Train model
        env:
          MODEL_TYPE: ${{ inputs.model_type }}
          EXPERIMENT_NAME: ${{ inputs.experiment_name }}
          DATA_MONTH: ${{ inputs.data_month }}
          MLFLOW_TRACKING_URI: http://localhost:5000
        run: |
          cd 03-orchestration
          
          # Parse year and month from YYYY-MM format
          YEAR=$(echo $DATA_MONTH | cut -d'-' -f1)
          MONTH=$(echo $DATA_MONTH | cut -d'-' -f2 | sed 's/^0*//')  # Remove leading zeros
          
          echo "================================"
          echo "Training Configuration:"
          echo "  Year: $YEAR"
          echo "  Month: $MONTH"
          echo "  Model Type: $MODEL_TYPE"
          echo "  Experiment: $EXPERIMENT_NAME"
          echo "  MLflow URI: $MLFLOW_TRACKING_URI"
          echo "  Artifact Root: $MLFLOW_ARTIFACT_ROOT"
          echo "================================"
          
          # Run training
          python duration-prediction.py --year $YEAR --month $MONTH
          
          # Verify run_id.txt was created
          if [ ! -f "run_id.txt" ]; then
            echo "❌ Error: run_id.txt not found after training"
            exit 1
          fi
          
          echo "✅ Training completed successfully!"
          echo "Run ID: $(cat run_id.txt)"
      
      - name: Register model in MLflow
        env:
          MLFLOW_TRACKING_URI: http://localhost:5000
        run: |
          cd 03-orchestration
          
          if [ ! -f "run_id.txt" ]; then
            echo "❌ run_id.txt not found, skipping model registration"
            exit 0
          fi
          
          RUN_ID=$(cat run_id.txt)
          echo "Best run ID: $RUN_ID"
          
          export RUN_ID="$RUN_ID"
          export MODEL_NAME="${{ inputs.experiment_name }}-${{ inputs.model_type }}"
          python ../.github/scripts/register_model.py
        continue-on-error: true
      
      - name: Upload model artifacts
        if: always()  # Upload even if registration fails
        uses: actions/upload-artifact@v4
        with:
          name: trained-model-${{ inputs.model_type }}-${{ github.run_number }}
          path: |
            03-orchestration/models/
            03-orchestration/run_id.txt
            mlartifacts/
            mlflow.db
          retention-days: 90
        continue-on-error: true
      
      - name: Generate model card
        if: always()  # Generate even if some steps fail
        run: |
          bash .github/scripts/generate_model_card.sh \
            "${{ inputs.model_type }}" \
            "${{ inputs.data_month }}" \
            "${{ inputs.experiment_name }}" \
            "${{ github.run_number }}" \
            "${{ github.sha }}" \
            "${{ github.repository }}" \
            "${{ github.server_url }}" \
            "${{ github.run_id }}" \
            "http://localhost:5000"
      
      - name: Upload model card
        if: always()  # Upload even if other steps fail
        uses: actions/upload-artifact@v4
        with:
          name: model-card-${{ inputs.model_type }}-${{ github.run_number }}
          path: model_card.md
          retention-days: 365
        continue-on-error: true
